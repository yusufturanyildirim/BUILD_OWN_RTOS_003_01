
BUILD_OWN_RTOS_SECTION_4_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f64  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800110c  0800110c  0001110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001184  08001184  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001184  08001184  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001184  08001184  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001184  08001184  00011184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001188  08001188  00011188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800118c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000068  080011f4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  080011f4  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000038ec  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000af2  00000000  00000000  00023984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000238  00000000  00000000  00024478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001d0  00000000  00000000  000246b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a6a4  00000000  00000000  00024880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000027ba  00000000  00000000  0003ef24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dfce  00000000  00000000  000416de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cf6ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d84  00000000  00000000  000cf700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000068 	.word	0x20000068
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080010f4 	.word	0x080010f4

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000006c 	.word	0x2000006c
 80001e4:	080010f4 	.word	0x080010f4

080001e8 <RCC_Config>:
#define GREEN		(1U<<12)



void RCC_Config(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	/* Enable GPIO Port D */
	RCC->AHB1ENR |= GPIOD_CLOCK;
 80001ec:	4b05      	ldr	r3, [pc, #20]	; (8000204 <RCC_Config+0x1c>)
 80001ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f0:	4a04      	ldr	r2, [pc, #16]	; (8000204 <RCC_Config+0x1c>)
 80001f2:	f043 0308 	orr.w	r3, r3, #8
 80001f6:	6313      	str	r3, [r2, #48]	; 0x30
	//RCC->CR |= (1U<<16);

	/* Check HSE ready */
	//while(!((RCC->CR) & (1U<<17)));

}
 80001f8:	bf00      	nop
 80001fa:	46bd      	mov	sp, r7
 80001fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
 8000204:	40023800 	.word	0x40023800

08000208 <GPIO_Config>:

void GPIO_Config(void)
{
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
	GPIOD->MODER |= GREEN_BIT| ORANGE_BIT| RED_BIT| BLUE_BIT;
 800020c:	4b05      	ldr	r3, [pc, #20]	; (8000224 <GPIO_Config+0x1c>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a04      	ldr	r2, [pc, #16]	; (8000224 <GPIO_Config+0x1c>)
 8000212:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000216:	6013      	str	r3, [r2, #0]
}
 8000218:	bf00      	nop
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	40020c00 	.word	0x40020c00

08000228 <LED_BLUE_ON>:

void LED_BLUE_ON(void)
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
	GPIOD->ODR |= BLUE;
 800022c:	4b05      	ldr	r3, [pc, #20]	; (8000244 <LED_BLUE_ON+0x1c>)
 800022e:	695b      	ldr	r3, [r3, #20]
 8000230:	4a04      	ldr	r2, [pc, #16]	; (8000244 <LED_BLUE_ON+0x1c>)
 8000232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000236:	6153      	str	r3, [r2, #20]
}
 8000238:	bf00      	nop
 800023a:	46bd      	mov	sp, r7
 800023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	40020c00 	.word	0x40020c00

08000248 <LED_BLUE_OFF>:

void LED_BLUE_OFF(void)
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
	GPIOD->ODR &= ~BLUE;
 800024c:	4b05      	ldr	r3, [pc, #20]	; (8000264 <LED_BLUE_OFF+0x1c>)
 800024e:	695b      	ldr	r3, [r3, #20]
 8000250:	4a04      	ldr	r2, [pc, #16]	; (8000264 <LED_BLUE_OFF+0x1c>)
 8000252:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000256:	6153      	str	r3, [r2, #20]
}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	40020c00 	.word	0x40020c00

08000268 <LED_RED_ON>:

void LED_RED_ON(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
	GPIOD->ODR |= RED;
 800026c:	4b05      	ldr	r3, [pc, #20]	; (8000284 <LED_RED_ON+0x1c>)
 800026e:	695b      	ldr	r3, [r3, #20]
 8000270:	4a04      	ldr	r2, [pc, #16]	; (8000284 <LED_RED_ON+0x1c>)
 8000272:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000276:	6153      	str	r3, [r2, #20]
}
 8000278:	bf00      	nop
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	40020c00 	.word	0x40020c00

08000288 <LED_RED_OFF>:

void LED_RED_OFF(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
	GPIOD->ODR &= ~RED;
 800028c:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <LED_RED_OFF+0x1c>)
 800028e:	695b      	ldr	r3, [r3, #20]
 8000290:	4a04      	ldr	r2, [pc, #16]	; (80002a4 <LED_RED_OFF+0x1c>)
 8000292:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000296:	6153      	str	r3, [r2, #20]
}
 8000298:	bf00      	nop
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	40020c00 	.word	0x40020c00

080002a8 <blue_led_main>:
void red_led_on(void);
void red_led_off(void);


int blue_led_main()
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
	for(;;)
	{
		blue_led_on();
 80002ac:	f000 f82e 	bl	800030c <blue_led_on>
		YTY_Delay(1);
 80002b0:	2001      	movs	r0, #1
 80002b2:	f000 f8ed 	bl	8000490 <YTY_Delay>
		blue_led_off();
 80002b6:	f000 f82f 	bl	8000318 <blue_led_off>
		YTY_Delay(1);
 80002ba:	2001      	movs	r0, #1
 80002bc:	f000 f8e8 	bl	8000490 <YTY_Delay>
		blue_led_on();
 80002c0:	e7f4      	b.n	80002ac <blue_led_main+0x4>

080002c2 <red_led_main>:

	}
}

int red_led_main()
{
 80002c2:	b580      	push	{r7, lr}
 80002c4:	af00      	add	r7, sp, #0
	for(;;)
	{
		red_led_on();
 80002c6:	f000 f82d 	bl	8000324 <red_led_on>
		YTY_Delay(1);
 80002ca:	2001      	movs	r0, #1
 80002cc:	f000 f8e0 	bl	8000490 <YTY_Delay>
		red_led_off();
 80002d0:	f000 f82e 	bl	8000330 <red_led_off>
		YTY_Delay(1);
 80002d4:	2001      	movs	r0, #1
 80002d6:	f000 f8db 	bl	8000490 <YTY_Delay>
		red_led_on();
 80002da:	e7f4      	b.n	80002c6 <red_led_main+0x4>

080002dc <main>:
	}
}
int main(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
	uint32_t volatile start = 0U;
 80002e2:	2300      	movs	r3, #0
 80002e4:	607b      	str	r3, [r7, #4]

	RCC_Config();
 80002e6:	f7ff ff7f 	bl	80001e8 <RCC_Config>
	GPIO_Config();
 80002ea:	f7ff ff8d 	bl	8000208 <GPIO_Config>
	UART_TRANSMIT_Config();
 80002ee:	f000 f951 	bl	8000594 <UART_TRANSMIT_Config>
	YTY_TIME_BASE_INIT();
 80002f2:	f000 f917 	bl	8000524 <YTY_TIME_BASE_INIT>

	if(start)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <main+0x24>
	{
		red_led_main();
 80002fc:	f7ff ffe1 	bl	80002c2 <red_led_main>
	}
	if(!start)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d101      	bne.n	800030a <main+0x2e>
	{
		blue_led_main();
 8000306:	f7ff ffcf 	bl	80002a8 <blue_led_main>
	}


	while(1)
 800030a:	e7fe      	b.n	800030a <main+0x2e>

0800030c <blue_led_on>:
	}
}


void blue_led_on(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	LED_BLUE_ON();
 8000310:	f7ff ff8a 	bl	8000228 <LED_BLUE_ON>
	//printf("Motor is running\n");
}
 8000314:	bf00      	nop
 8000316:	bd80      	pop	{r7, pc}

08000318 <blue_led_off>:

void blue_led_off(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	LED_BLUE_OFF();
 800031c:	f7ff ff94 	bl	8000248 <LED_BLUE_OFF>
	//printf("Motor is stopping\n");
}
 8000320:	bf00      	nop
 8000322:	bd80      	pop	{r7, pc}

08000324 <red_led_on>:

void red_led_on(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	LED_RED_ON();
 8000328:	f7ff ff9e 	bl	8000268 <LED_RED_ON>
	//printf("Motor is openning\n");
}
 800032c:	bf00      	nop
 800032e:	bd80      	pop	{r7, pc}

08000330 <red_led_off>:

void red_led_off(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	LED_RED_OFF();
 8000334:	f7ff ffa8 	bl	8000288 <LED_RED_OFF>
	printf("Motor is closing\n");
 8000338:	4802      	ldr	r0, [pc, #8]	; (8000344 <red_led_off+0x14>)
 800033a:	f000 fa83 	bl	8000844 <puts>
}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	0800110c 	.word	0x0800110c

08000348 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b086      	sub	sp, #24
 800034c:	af00      	add	r7, sp, #0
 800034e:	60f8      	str	r0, [r7, #12]
 8000350:	60b9      	str	r1, [r7, #8]
 8000352:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000354:	2300      	movs	r3, #0
 8000356:	617b      	str	r3, [r7, #20]
 8000358:	e00a      	b.n	8000370 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800035a:	f3af 8000 	nop.w
 800035e:	4601      	mov	r1, r0
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	1c5a      	adds	r2, r3, #1
 8000364:	60ba      	str	r2, [r7, #8]
 8000366:	b2ca      	uxtb	r2, r1
 8000368:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800036a:	697b      	ldr	r3, [r7, #20]
 800036c:	3301      	adds	r3, #1
 800036e:	617b      	str	r3, [r7, #20]
 8000370:	697a      	ldr	r2, [r7, #20]
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	429a      	cmp	r2, r3
 8000376:	dbf0      	blt.n	800035a <_read+0x12>
	}

return len;
 8000378:	687b      	ldr	r3, [r7, #4]
}
 800037a:	4618      	mov	r0, r3
 800037c:	3718      	adds	r7, #24
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}

08000382 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000382:	b580      	push	{r7, lr}
 8000384:	b086      	sub	sp, #24
 8000386:	af00      	add	r7, sp, #0
 8000388:	60f8      	str	r0, [r7, #12]
 800038a:	60b9      	str	r1, [r7, #8]
 800038c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800038e:	2300      	movs	r3, #0
 8000390:	617b      	str	r3, [r7, #20]
 8000392:	e009      	b.n	80003a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000394:	68bb      	ldr	r3, [r7, #8]
 8000396:	1c5a      	adds	r2, r3, #1
 8000398:	60ba      	str	r2, [r7, #8]
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	4618      	mov	r0, r3
 800039e:	f000 f8ed 	bl	800057c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	3301      	adds	r3, #1
 80003a6:	617b      	str	r3, [r7, #20]
 80003a8:	697a      	ldr	r2, [r7, #20]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	dbf1      	blt.n	8000394 <_write+0x12>
	}
	return len;
 80003b0:	687b      	ldr	r3, [r7, #4]
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	3718      	adds	r7, #24
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}

080003ba <_close>:

int _close(int file)
{
 80003ba:	b480      	push	{r7}
 80003bc:	b083      	sub	sp, #12
 80003be:	af00      	add	r7, sp, #0
 80003c0:	6078      	str	r0, [r7, #4]
	return -1;
 80003c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr

080003d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003d2:	b480      	push	{r7}
 80003d4:	b083      	sub	sp, #12
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	6078      	str	r0, [r7, #4]
 80003da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003e2:	605a      	str	r2, [r3, #4]
	return 0;
 80003e4:	2300      	movs	r3, #0
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	370c      	adds	r7, #12
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr

080003f2 <_isatty>:

int _isatty(int file)
{
 80003f2:	b480      	push	{r7}
 80003f4:	b083      	sub	sp, #12
 80003f6:	af00      	add	r7, sp, #0
 80003f8:	6078      	str	r0, [r7, #4]
	return 1;
 80003fa:	2301      	movs	r3, #1
}
 80003fc:	4618      	mov	r0, r3
 80003fe:	370c      	adds	r7, #12
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr

08000408 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000408:	b480      	push	{r7}
 800040a:	b085      	sub	sp, #20
 800040c:	af00      	add	r7, sp, #0
 800040e:	60f8      	str	r0, [r7, #12]
 8000410:	60b9      	str	r1, [r7, #8]
 8000412:	607a      	str	r2, [r7, #4]
	return 0;
 8000414:	2300      	movs	r3, #0
}
 8000416:	4618      	mov	r0, r3
 8000418:	3714      	adds	r7, #20
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
	...

08000424 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b086      	sub	sp, #24
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800042c:	4a14      	ldr	r2, [pc, #80]	; (8000480 <_sbrk+0x5c>)
 800042e:	4b15      	ldr	r3, [pc, #84]	; (8000484 <_sbrk+0x60>)
 8000430:	1ad3      	subs	r3, r2, r3
 8000432:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000434:	697b      	ldr	r3, [r7, #20]
 8000436:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000438:	4b13      	ldr	r3, [pc, #76]	; (8000488 <_sbrk+0x64>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d102      	bne.n	8000446 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000440:	4b11      	ldr	r3, [pc, #68]	; (8000488 <_sbrk+0x64>)
 8000442:	4a12      	ldr	r2, [pc, #72]	; (800048c <_sbrk+0x68>)
 8000444:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000446:	4b10      	ldr	r3, [pc, #64]	; (8000488 <_sbrk+0x64>)
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4413      	add	r3, r2
 800044e:	693a      	ldr	r2, [r7, #16]
 8000450:	429a      	cmp	r2, r3
 8000452:	d207      	bcs.n	8000464 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000454:	f000 f956 	bl	8000704 <__errno>
 8000458:	4603      	mov	r3, r0
 800045a:	220c      	movs	r2, #12
 800045c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800045e:	f04f 33ff 	mov.w	r3, #4294967295
 8000462:	e009      	b.n	8000478 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000464:	4b08      	ldr	r3, [pc, #32]	; (8000488 <_sbrk+0x64>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800046a:	4b07      	ldr	r3, [pc, #28]	; (8000488 <_sbrk+0x64>)
 800046c:	681a      	ldr	r2, [r3, #0]
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4413      	add	r3, r2
 8000472:	4a05      	ldr	r2, [pc, #20]	; (8000488 <_sbrk+0x64>)
 8000474:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000476:	68fb      	ldr	r3, [r7, #12]
}
 8000478:	4618      	mov	r0, r3
 800047a:	3718      	adds	r7, #24
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	20020000 	.word	0x20020000
 8000484:	00000400 	.word	0x00000400
 8000488:	20000084 	.word	0x20000084
 800048c:	200000a8 	.word	0x200000a8

08000490 <YTY_Delay>:
volatile uint32_t g_curr_tick_prime;
volatile uint32_t tick_freq = 1;

/* Parameter takes value in seconds */
void YTY_Delay(uint32_t delay)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
	uint32_t tickStart = Get_Tick();
 8000498:	f000 f82e 	bl	80004f8 <Get_Tick>
 800049c:	60b8      	str	r0, [r7, #8]
	uint32_t wait = delay;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	60fb      	str	r3, [r7, #12]
	if(wait < MAX_DELAY)
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004a8:	d004      	beq.n	80004b4 <YTY_Delay+0x24>
	{
		wait += tick_freq;
 80004aa:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <YTY_Delay+0x40>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	68fa      	ldr	r2, [r7, #12]
 80004b0:	4413      	add	r3, r2
 80004b2:	60fb      	str	r3, [r7, #12]
	}

	while((Get_Tick() - tickStart) < wait){}
 80004b4:	bf00      	nop
 80004b6:	f000 f81f 	bl	80004f8 <Get_Tick>
 80004ba:	4602      	mov	r2, r0
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	1ad3      	subs	r3, r2, r3
 80004c0:	68fa      	ldr	r2, [r7, #12]
 80004c2:	429a      	cmp	r2, r3
 80004c4:	d8f7      	bhi.n	80004b6 <YTY_Delay+0x26>

}
 80004c6:	bf00      	nop
 80004c8:	bf00      	nop
 80004ca:	3710      	adds	r7, #16
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20000000 	.word	0x20000000

080004d4 <Tick_Increment>:

void Tick_Increment(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
	g_curr_tick += tick_freq;
 80004d8:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <Tick_Increment+0x1c>)
 80004da:	681a      	ldr	r2, [r3, #0]
 80004dc:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <Tick_Increment+0x20>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4413      	add	r3, r2
 80004e2:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <Tick_Increment+0x20>)
 80004e4:	6013      	str	r3, [r2, #0]
}
 80004e6:	bf00      	nop
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr
 80004f0:	20000000 	.word	0x20000000
 80004f4:	20000090 	.word	0x20000090

080004f8 <Get_Tick>:

uint32_t Get_Tick(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004fc:	b672      	cpsid	i
}
 80004fe:	bf00      	nop
	__disable_irq();
	g_curr_tick_prime = g_curr_tick;
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <Get_Tick+0x24>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a06      	ldr	r2, [pc, #24]	; (8000520 <Get_Tick+0x28>)
 8000506:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000508:	b662      	cpsie	i
}
 800050a:	bf00      	nop
	__enable_irq();

	return g_curr_tick_prime;
 800050c:	4b04      	ldr	r3, [pc, #16]	; (8000520 <Get_Tick+0x28>)
 800050e:	681b      	ldr	r3, [r3, #0]
}
 8000510:	4618      	mov	r0, r3
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	20000090 	.word	0x20000090
 8000520:	20000094 	.word	0x20000094

08000524 <YTY_TIME_BASE_INIT>:

void YTY_TIME_BASE_INIT(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
	/* Reload the timer with number of cycles per second */

	/* I wrote -1 because it becomes from 0 */
	SysTick->LOAD = ONE_SEC_LOAD - 1 ;
 8000528:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <YTY_TIME_BASE_INIT+0x44>)
 800052a:	4a10      	ldr	r2, [pc, #64]	; (800056c <YTY_TIME_BASE_INIT+0x48>)
 800052c:	605a      	str	r2, [r3, #4]

	/* Clear Systick Current value register */
	SysTick->VAL = 0 ;
 800052e:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <YTY_TIME_BASE_INIT+0x44>)
 8000530:	2200      	movs	r2, #0
 8000532:	609a      	str	r2, [r3, #8]
	/* Select Internal Clock Source */
	SysTick->CTRL |=  CTRL_CLCKSRC ;
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <YTY_TIME_BASE_INIT+0x44>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a0b      	ldr	r2, [pc, #44]	; (8000568 <YTY_TIME_BASE_INIT+0x44>)
 800053a:	f043 0304 	orr.w	r3, r3, #4
 800053e:	6013      	str	r3, [r2, #0]

	/* Enable Interrupt */
	SysTick->CTRL |= CTRL_TICK_IT;
 8000540:	4b09      	ldr	r3, [pc, #36]	; (8000568 <YTY_TIME_BASE_INIT+0x44>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a08      	ldr	r2, [pc, #32]	; (8000568 <YTY_TIME_BASE_INIT+0x44>)
 8000546:	f043 0302 	orr.w	r3, r3, #2
 800054a:	6013      	str	r3, [r2, #0]

	/* Enable Systick */
	SysTick->CTRL |= CTRL_EN;
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <YTY_TIME_BASE_INIT+0x44>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a05      	ldr	r2, [pc, #20]	; (8000568 <YTY_TIME_BASE_INIT+0x44>)
 8000552:	f043 0301 	orr.w	r3, r3, #1
 8000556:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000558:	b662      	cpsie	i
}
 800055a:	bf00      	nop

	/* Enable Global Interrupt */
	__enable_irq();

}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	e000e010 	.word	0xe000e010
 800056c:	00f423ff 	.word	0x00f423ff

08000570 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	Tick_Increment();
 8000574:	f7ff ffae 	bl	80004d4 <Tick_Increment>
}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}

0800057c <__io_putchar>:
static void UART_SET_BAUDRATE(uint32_t peripheralClock, uint32_t baudRate);

static void UART_WRITE(int ch);

int __io_putchar(int ch)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	UART_WRITE(ch);
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f000 f853 	bl	8000630 <UART_WRITE>
	return ch;
 800058a:	687b      	ldr	r3, [r7, #4]
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <UART_TRANSMIT_Config>:
void UART_TRANSMIT_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	/* Enable Clock Access to GPIOA */
	/* USART2_TX -> PA2 */
	RCC->AHB1ENR |= GPIOA_CLOCK;
 8000598:	4b21      	ldr	r3, [pc, #132]	; (8000620 <UART_TRANSMIT_Config+0x8c>)
 800059a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059c:	4a20      	ldr	r2, [pc, #128]	; (8000620 <UART_TRANSMIT_Config+0x8c>)
 800059e:	f043 0301 	orr.w	r3, r3, #1
 80005a2:	6313      	str	r3, [r2, #48]	; 0x30

	/* Set PA2 pin as alternate function */
	GPIOA->MODER &= ~(1U<<4);
 80005a4:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <UART_TRANSMIT_Config+0x90>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a1e      	ldr	r2, [pc, #120]	; (8000624 <UART_TRANSMIT_Config+0x90>)
 80005aa:	f023 0310 	bic.w	r3, r3, #16
 80005ae:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1U<<5);
 80005b0:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <UART_TRANSMIT_Config+0x90>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a1b      	ldr	r2, [pc, #108]	; (8000624 <UART_TRANSMIT_Config+0x90>)
 80005b6:	f043 0320 	orr.w	r3, r3, #32
 80005ba:	6013      	str	r3, [r2, #0]


	/* Set alternate function type to AF7(UART2_TX -> From Alternate Function Mapping) */
	/* ARF[0] -> ARFLow ARF[1] -> ARFHigh */
	GPIOA->AFR[0] |= (1U<<8);
 80005bc:	4b19      	ldr	r3, [pc, #100]	; (8000624 <UART_TRANSMIT_Config+0x90>)
 80005be:	6a1b      	ldr	r3, [r3, #32]
 80005c0:	4a18      	ldr	r2, [pc, #96]	; (8000624 <UART_TRANSMIT_Config+0x90>)
 80005c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005c6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 80005c8:	4b16      	ldr	r3, [pc, #88]	; (8000624 <UART_TRANSMIT_Config+0x90>)
 80005ca:	6a1b      	ldr	r3, [r3, #32]
 80005cc:	4a15      	ldr	r2, [pc, #84]	; (8000624 <UART_TRANSMIT_Config+0x90>)
 80005ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005d2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 80005d4:	4b13      	ldr	r3, [pc, #76]	; (8000624 <UART_TRANSMIT_Config+0x90>)
 80005d6:	6a1b      	ldr	r3, [r3, #32]
 80005d8:	4a12      	ldr	r2, [pc, #72]	; (8000624 <UART_TRANSMIT_Config+0x90>)
 80005da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005de:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11); /* GPIOA->ARF[0] &= (1U<<11) */
 80005e0:	4b10      	ldr	r3, [pc, #64]	; (8000624 <UART_TRANSMIT_Config+0x90>)
 80005e2:	6a1b      	ldr	r3, [r3, #32]
 80005e4:	4a0f      	ldr	r2, [pc, #60]	; (8000624 <UART_TRANSMIT_Config+0x90>)
 80005e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80005ea:	6213      	str	r3, [r2, #32]

	/* Enable Clock Access to UART*/
	RCC->APB1ENR |= UART2_EN;
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <UART_TRANSMIT_Config+0x8c>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	4a0b      	ldr	r2, [pc, #44]	; (8000620 <UART_TRANSMIT_Config+0x8c>)
 80005f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f6:	6413      	str	r3, [r2, #64]	; 0x40
	/* Configure boundrate */
	UART_SET_BAUDRATE(APB1_CLOCK,UART_BAUDRATE);
 80005f8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80005fc:	480a      	ldr	r0, [pc, #40]	; (8000628 <UART_TRANSMIT_Config+0x94>)
 80005fe:	f000 f82f 	bl	8000660 <UART_SET_BAUDRATE>
	/* Configure Transfer Direction */
	USART2->CR1 |= UART_CR1_REGISTER_TE;
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <UART_TRANSMIT_Config+0x98>)
 8000604:	68db      	ldr	r3, [r3, #12]
 8000606:	4a09      	ldr	r2, [pc, #36]	; (800062c <UART_TRANSMIT_Config+0x98>)
 8000608:	f043 0308 	orr.w	r3, r3, #8
 800060c:	60d3      	str	r3, [r2, #12]

	/* Enable UART Module */
	USART2->CR1 |= UART_CR1_ENABLE;
 800060e:	4b07      	ldr	r3, [pc, #28]	; (800062c <UART_TRANSMIT_Config+0x98>)
 8000610:	68db      	ldr	r3, [r3, #12]
 8000612:	4a06      	ldr	r2, [pc, #24]	; (800062c <UART_TRANSMIT_Config+0x98>)
 8000614:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000618:	60d3      	str	r3, [r2, #12]
}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800
 8000624:	40020000 	.word	0x40020000
 8000628:	00f42400 	.word	0x00f42400
 800062c:	40004400 	.word	0x40004400

08000630 <UART_WRITE>:

static void UART_WRITE(int ch)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	/* Make sure the transmit data register is empty */
	while(!(USART2->SR & UART_ST_TXE)){}
 8000638:	bf00      	nop
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <UART_WRITE+0x2c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000642:	2b00      	cmp	r3, #0
 8000644:	d0f9      	beq.n	800063a <UART_WRITE+0xa>

	/* Write to transmit data register */
	USART2->DR = (ch & 0xFF);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4a04      	ldr	r2, [pc, #16]	; (800065c <UART_WRITE+0x2c>)
 800064a:	b2db      	uxtb	r3, r3
 800064c:	6053      	str	r3, [r2, #4]
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	40004400 	.word	0x40004400

08000660 <UART_SET_BAUDRATE>:


static void UART_SET_BAUDRATE(uint32_t peripheralClock, uint32_t baudRate)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	6039      	str	r1, [r7, #0]
	USART2->BRR = COMPUTE_UART_BAUDRATE(peripheralClock, baudRate);
 800066a:	6839      	ldr	r1, [r7, #0]
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f000 f80b 	bl	8000688 <COMPUTE_UART_BAUDRATE>
 8000672:	4603      	mov	r3, r0
 8000674:	461a      	mov	r2, r3
 8000676:	4b03      	ldr	r3, [pc, #12]	; (8000684 <UART_SET_BAUDRATE+0x24>)
 8000678:	609a      	str	r2, [r3, #8]
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40004400 	.word	0x40004400

08000688 <COMPUTE_UART_BAUDRATE>:


static uint16_t COMPUTE_UART_BAUDRATE(uint32_t peripheralClock, uint32_t baudRate)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]
	return ((peripheralClock + (baudRate / 2))/ baudRate);
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	085a      	lsrs	r2, r3, #1
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	441a      	add	r2, r3
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	fbb2 f3f3 	udiv	r3, r2, r3
 80006a0:	b29b      	uxth	r3, r3

}
 80006a2:	4618      	mov	r0, r3
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
	...

080006b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006b0:	480d      	ldr	r0, [pc, #52]	; (80006e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006b2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b8:	480c      	ldr	r0, [pc, #48]	; (80006ec <LoopForever+0x6>)
  ldr r1, =_edata
 80006ba:	490d      	ldr	r1, [pc, #52]	; (80006f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006bc:	4a0d      	ldr	r2, [pc, #52]	; (80006f4 <LoopForever+0xe>)
  movs r3, #0
 80006be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006c0:	e002      	b.n	80006c8 <LoopCopyDataInit>

080006c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c6:	3304      	adds	r3, #4

080006c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006cc:	d3f9      	bcc.n	80006c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ce:	4a0a      	ldr	r2, [pc, #40]	; (80006f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006d0:	4c0a      	ldr	r4, [pc, #40]	; (80006fc <LoopForever+0x16>)
  movs r3, #0
 80006d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d4:	e001      	b.n	80006da <LoopFillZerobss>

080006d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d8:	3204      	adds	r2, #4

080006da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006dc:	d3fb      	bcc.n	80006d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006de:	f000 f817 	bl	8000710 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006e2:	f7ff fdfb 	bl	80002dc <main>

080006e6 <LoopForever>:

LoopForever:
    b LoopForever
 80006e6:	e7fe      	b.n	80006e6 <LoopForever>
  ldr   r0, =_estack
 80006e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006f0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80006f4:	0800118c 	.word	0x0800118c
  ldr r2, =_sbss
 80006f8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80006fc:	200000a8 	.word	0x200000a8

08000700 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000700:	e7fe      	b.n	8000700 <ADC_IRQHandler>
	...

08000704 <__errno>:
 8000704:	4b01      	ldr	r3, [pc, #4]	; (800070c <__errno+0x8>)
 8000706:	6818      	ldr	r0, [r3, #0]
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	20000004 	.word	0x20000004

08000710 <__libc_init_array>:
 8000710:	b570      	push	{r4, r5, r6, lr}
 8000712:	4d0d      	ldr	r5, [pc, #52]	; (8000748 <__libc_init_array+0x38>)
 8000714:	4c0d      	ldr	r4, [pc, #52]	; (800074c <__libc_init_array+0x3c>)
 8000716:	1b64      	subs	r4, r4, r5
 8000718:	10a4      	asrs	r4, r4, #2
 800071a:	2600      	movs	r6, #0
 800071c:	42a6      	cmp	r6, r4
 800071e:	d109      	bne.n	8000734 <__libc_init_array+0x24>
 8000720:	4d0b      	ldr	r5, [pc, #44]	; (8000750 <__libc_init_array+0x40>)
 8000722:	4c0c      	ldr	r4, [pc, #48]	; (8000754 <__libc_init_array+0x44>)
 8000724:	f000 fce6 	bl	80010f4 <_init>
 8000728:	1b64      	subs	r4, r4, r5
 800072a:	10a4      	asrs	r4, r4, #2
 800072c:	2600      	movs	r6, #0
 800072e:	42a6      	cmp	r6, r4
 8000730:	d105      	bne.n	800073e <__libc_init_array+0x2e>
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f855 3b04 	ldr.w	r3, [r5], #4
 8000738:	4798      	blx	r3
 800073a:	3601      	adds	r6, #1
 800073c:	e7ee      	b.n	800071c <__libc_init_array+0xc>
 800073e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000742:	4798      	blx	r3
 8000744:	3601      	adds	r6, #1
 8000746:	e7f2      	b.n	800072e <__libc_init_array+0x1e>
 8000748:	08001184 	.word	0x08001184
 800074c:	08001184 	.word	0x08001184
 8000750:	08001184 	.word	0x08001184
 8000754:	08001188 	.word	0x08001188

08000758 <memset>:
 8000758:	4402      	add	r2, r0
 800075a:	4603      	mov	r3, r0
 800075c:	4293      	cmp	r3, r2
 800075e:	d100      	bne.n	8000762 <memset+0xa>
 8000760:	4770      	bx	lr
 8000762:	f803 1b01 	strb.w	r1, [r3], #1
 8000766:	e7f9      	b.n	800075c <memset+0x4>

08000768 <_puts_r>:
 8000768:	b570      	push	{r4, r5, r6, lr}
 800076a:	460e      	mov	r6, r1
 800076c:	4605      	mov	r5, r0
 800076e:	b118      	cbz	r0, 8000778 <_puts_r+0x10>
 8000770:	6983      	ldr	r3, [r0, #24]
 8000772:	b90b      	cbnz	r3, 8000778 <_puts_r+0x10>
 8000774:	f000 fa48 	bl	8000c08 <__sinit>
 8000778:	69ab      	ldr	r3, [r5, #24]
 800077a:	68ac      	ldr	r4, [r5, #8]
 800077c:	b913      	cbnz	r3, 8000784 <_puts_r+0x1c>
 800077e:	4628      	mov	r0, r5
 8000780:	f000 fa42 	bl	8000c08 <__sinit>
 8000784:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <_puts_r+0xd0>)
 8000786:	429c      	cmp	r4, r3
 8000788:	d120      	bne.n	80007cc <_puts_r+0x64>
 800078a:	686c      	ldr	r4, [r5, #4]
 800078c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800078e:	07db      	lsls	r3, r3, #31
 8000790:	d405      	bmi.n	800079e <_puts_r+0x36>
 8000792:	89a3      	ldrh	r3, [r4, #12]
 8000794:	0598      	lsls	r0, r3, #22
 8000796:	d402      	bmi.n	800079e <_puts_r+0x36>
 8000798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800079a:	f000 fad3 	bl	8000d44 <__retarget_lock_acquire_recursive>
 800079e:	89a3      	ldrh	r3, [r4, #12]
 80007a0:	0719      	lsls	r1, r3, #28
 80007a2:	d51d      	bpl.n	80007e0 <_puts_r+0x78>
 80007a4:	6923      	ldr	r3, [r4, #16]
 80007a6:	b1db      	cbz	r3, 80007e0 <_puts_r+0x78>
 80007a8:	3e01      	subs	r6, #1
 80007aa:	68a3      	ldr	r3, [r4, #8]
 80007ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80007b0:	3b01      	subs	r3, #1
 80007b2:	60a3      	str	r3, [r4, #8]
 80007b4:	bb39      	cbnz	r1, 8000806 <_puts_r+0x9e>
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	da38      	bge.n	800082c <_puts_r+0xc4>
 80007ba:	4622      	mov	r2, r4
 80007bc:	210a      	movs	r1, #10
 80007be:	4628      	mov	r0, r5
 80007c0:	f000 f848 	bl	8000854 <__swbuf_r>
 80007c4:	3001      	adds	r0, #1
 80007c6:	d011      	beq.n	80007ec <_puts_r+0x84>
 80007c8:	250a      	movs	r5, #10
 80007ca:	e011      	b.n	80007f0 <_puts_r+0x88>
 80007cc:	4b1b      	ldr	r3, [pc, #108]	; (800083c <_puts_r+0xd4>)
 80007ce:	429c      	cmp	r4, r3
 80007d0:	d101      	bne.n	80007d6 <_puts_r+0x6e>
 80007d2:	68ac      	ldr	r4, [r5, #8]
 80007d4:	e7da      	b.n	800078c <_puts_r+0x24>
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <_puts_r+0xd8>)
 80007d8:	429c      	cmp	r4, r3
 80007da:	bf08      	it	eq
 80007dc:	68ec      	ldreq	r4, [r5, #12]
 80007de:	e7d5      	b.n	800078c <_puts_r+0x24>
 80007e0:	4621      	mov	r1, r4
 80007e2:	4628      	mov	r0, r5
 80007e4:	f000 f888 	bl	80008f8 <__swsetup_r>
 80007e8:	2800      	cmp	r0, #0
 80007ea:	d0dd      	beq.n	80007a8 <_puts_r+0x40>
 80007ec:	f04f 35ff 	mov.w	r5, #4294967295
 80007f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80007f2:	07da      	lsls	r2, r3, #31
 80007f4:	d405      	bmi.n	8000802 <_puts_r+0x9a>
 80007f6:	89a3      	ldrh	r3, [r4, #12]
 80007f8:	059b      	lsls	r3, r3, #22
 80007fa:	d402      	bmi.n	8000802 <_puts_r+0x9a>
 80007fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80007fe:	f000 faa2 	bl	8000d46 <__retarget_lock_release_recursive>
 8000802:	4628      	mov	r0, r5
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	2b00      	cmp	r3, #0
 8000808:	da04      	bge.n	8000814 <_puts_r+0xac>
 800080a:	69a2      	ldr	r2, [r4, #24]
 800080c:	429a      	cmp	r2, r3
 800080e:	dc06      	bgt.n	800081e <_puts_r+0xb6>
 8000810:	290a      	cmp	r1, #10
 8000812:	d004      	beq.n	800081e <_puts_r+0xb6>
 8000814:	6823      	ldr	r3, [r4, #0]
 8000816:	1c5a      	adds	r2, r3, #1
 8000818:	6022      	str	r2, [r4, #0]
 800081a:	7019      	strb	r1, [r3, #0]
 800081c:	e7c5      	b.n	80007aa <_puts_r+0x42>
 800081e:	4622      	mov	r2, r4
 8000820:	4628      	mov	r0, r5
 8000822:	f000 f817 	bl	8000854 <__swbuf_r>
 8000826:	3001      	adds	r0, #1
 8000828:	d1bf      	bne.n	80007aa <_puts_r+0x42>
 800082a:	e7df      	b.n	80007ec <_puts_r+0x84>
 800082c:	6823      	ldr	r3, [r4, #0]
 800082e:	250a      	movs	r5, #10
 8000830:	1c5a      	adds	r2, r3, #1
 8000832:	6022      	str	r2, [r4, #0]
 8000834:	701d      	strb	r5, [r3, #0]
 8000836:	e7db      	b.n	80007f0 <_puts_r+0x88>
 8000838:	08001144 	.word	0x08001144
 800083c:	08001164 	.word	0x08001164
 8000840:	08001124 	.word	0x08001124

08000844 <puts>:
 8000844:	4b02      	ldr	r3, [pc, #8]	; (8000850 <puts+0xc>)
 8000846:	4601      	mov	r1, r0
 8000848:	6818      	ldr	r0, [r3, #0]
 800084a:	f7ff bf8d 	b.w	8000768 <_puts_r>
 800084e:	bf00      	nop
 8000850:	20000004 	.word	0x20000004

08000854 <__swbuf_r>:
 8000854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000856:	460e      	mov	r6, r1
 8000858:	4614      	mov	r4, r2
 800085a:	4605      	mov	r5, r0
 800085c:	b118      	cbz	r0, 8000866 <__swbuf_r+0x12>
 800085e:	6983      	ldr	r3, [r0, #24]
 8000860:	b90b      	cbnz	r3, 8000866 <__swbuf_r+0x12>
 8000862:	f000 f9d1 	bl	8000c08 <__sinit>
 8000866:	4b21      	ldr	r3, [pc, #132]	; (80008ec <__swbuf_r+0x98>)
 8000868:	429c      	cmp	r4, r3
 800086a:	d12b      	bne.n	80008c4 <__swbuf_r+0x70>
 800086c:	686c      	ldr	r4, [r5, #4]
 800086e:	69a3      	ldr	r3, [r4, #24]
 8000870:	60a3      	str	r3, [r4, #8]
 8000872:	89a3      	ldrh	r3, [r4, #12]
 8000874:	071a      	lsls	r2, r3, #28
 8000876:	d52f      	bpl.n	80008d8 <__swbuf_r+0x84>
 8000878:	6923      	ldr	r3, [r4, #16]
 800087a:	b36b      	cbz	r3, 80008d8 <__swbuf_r+0x84>
 800087c:	6923      	ldr	r3, [r4, #16]
 800087e:	6820      	ldr	r0, [r4, #0]
 8000880:	1ac0      	subs	r0, r0, r3
 8000882:	6963      	ldr	r3, [r4, #20]
 8000884:	b2f6      	uxtb	r6, r6
 8000886:	4283      	cmp	r3, r0
 8000888:	4637      	mov	r7, r6
 800088a:	dc04      	bgt.n	8000896 <__swbuf_r+0x42>
 800088c:	4621      	mov	r1, r4
 800088e:	4628      	mov	r0, r5
 8000890:	f000 f926 	bl	8000ae0 <_fflush_r>
 8000894:	bb30      	cbnz	r0, 80008e4 <__swbuf_r+0x90>
 8000896:	68a3      	ldr	r3, [r4, #8]
 8000898:	3b01      	subs	r3, #1
 800089a:	60a3      	str	r3, [r4, #8]
 800089c:	6823      	ldr	r3, [r4, #0]
 800089e:	1c5a      	adds	r2, r3, #1
 80008a0:	6022      	str	r2, [r4, #0]
 80008a2:	701e      	strb	r6, [r3, #0]
 80008a4:	6963      	ldr	r3, [r4, #20]
 80008a6:	3001      	adds	r0, #1
 80008a8:	4283      	cmp	r3, r0
 80008aa:	d004      	beq.n	80008b6 <__swbuf_r+0x62>
 80008ac:	89a3      	ldrh	r3, [r4, #12]
 80008ae:	07db      	lsls	r3, r3, #31
 80008b0:	d506      	bpl.n	80008c0 <__swbuf_r+0x6c>
 80008b2:	2e0a      	cmp	r6, #10
 80008b4:	d104      	bne.n	80008c0 <__swbuf_r+0x6c>
 80008b6:	4621      	mov	r1, r4
 80008b8:	4628      	mov	r0, r5
 80008ba:	f000 f911 	bl	8000ae0 <_fflush_r>
 80008be:	b988      	cbnz	r0, 80008e4 <__swbuf_r+0x90>
 80008c0:	4638      	mov	r0, r7
 80008c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008c4:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <__swbuf_r+0x9c>)
 80008c6:	429c      	cmp	r4, r3
 80008c8:	d101      	bne.n	80008ce <__swbuf_r+0x7a>
 80008ca:	68ac      	ldr	r4, [r5, #8]
 80008cc:	e7cf      	b.n	800086e <__swbuf_r+0x1a>
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <__swbuf_r+0xa0>)
 80008d0:	429c      	cmp	r4, r3
 80008d2:	bf08      	it	eq
 80008d4:	68ec      	ldreq	r4, [r5, #12]
 80008d6:	e7ca      	b.n	800086e <__swbuf_r+0x1a>
 80008d8:	4621      	mov	r1, r4
 80008da:	4628      	mov	r0, r5
 80008dc:	f000 f80c 	bl	80008f8 <__swsetup_r>
 80008e0:	2800      	cmp	r0, #0
 80008e2:	d0cb      	beq.n	800087c <__swbuf_r+0x28>
 80008e4:	f04f 37ff 	mov.w	r7, #4294967295
 80008e8:	e7ea      	b.n	80008c0 <__swbuf_r+0x6c>
 80008ea:	bf00      	nop
 80008ec:	08001144 	.word	0x08001144
 80008f0:	08001164 	.word	0x08001164
 80008f4:	08001124 	.word	0x08001124

080008f8 <__swsetup_r>:
 80008f8:	4b32      	ldr	r3, [pc, #200]	; (80009c4 <__swsetup_r+0xcc>)
 80008fa:	b570      	push	{r4, r5, r6, lr}
 80008fc:	681d      	ldr	r5, [r3, #0]
 80008fe:	4606      	mov	r6, r0
 8000900:	460c      	mov	r4, r1
 8000902:	b125      	cbz	r5, 800090e <__swsetup_r+0x16>
 8000904:	69ab      	ldr	r3, [r5, #24]
 8000906:	b913      	cbnz	r3, 800090e <__swsetup_r+0x16>
 8000908:	4628      	mov	r0, r5
 800090a:	f000 f97d 	bl	8000c08 <__sinit>
 800090e:	4b2e      	ldr	r3, [pc, #184]	; (80009c8 <__swsetup_r+0xd0>)
 8000910:	429c      	cmp	r4, r3
 8000912:	d10f      	bne.n	8000934 <__swsetup_r+0x3c>
 8000914:	686c      	ldr	r4, [r5, #4]
 8000916:	89a3      	ldrh	r3, [r4, #12]
 8000918:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800091c:	0719      	lsls	r1, r3, #28
 800091e:	d42c      	bmi.n	800097a <__swsetup_r+0x82>
 8000920:	06dd      	lsls	r5, r3, #27
 8000922:	d411      	bmi.n	8000948 <__swsetup_r+0x50>
 8000924:	2309      	movs	r3, #9
 8000926:	6033      	str	r3, [r6, #0]
 8000928:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800092c:	81a3      	strh	r3, [r4, #12]
 800092e:	f04f 30ff 	mov.w	r0, #4294967295
 8000932:	e03e      	b.n	80009b2 <__swsetup_r+0xba>
 8000934:	4b25      	ldr	r3, [pc, #148]	; (80009cc <__swsetup_r+0xd4>)
 8000936:	429c      	cmp	r4, r3
 8000938:	d101      	bne.n	800093e <__swsetup_r+0x46>
 800093a:	68ac      	ldr	r4, [r5, #8]
 800093c:	e7eb      	b.n	8000916 <__swsetup_r+0x1e>
 800093e:	4b24      	ldr	r3, [pc, #144]	; (80009d0 <__swsetup_r+0xd8>)
 8000940:	429c      	cmp	r4, r3
 8000942:	bf08      	it	eq
 8000944:	68ec      	ldreq	r4, [r5, #12]
 8000946:	e7e6      	b.n	8000916 <__swsetup_r+0x1e>
 8000948:	0758      	lsls	r0, r3, #29
 800094a:	d512      	bpl.n	8000972 <__swsetup_r+0x7a>
 800094c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800094e:	b141      	cbz	r1, 8000962 <__swsetup_r+0x6a>
 8000950:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000954:	4299      	cmp	r1, r3
 8000956:	d002      	beq.n	800095e <__swsetup_r+0x66>
 8000958:	4630      	mov	r0, r6
 800095a:	f000 fa59 	bl	8000e10 <_free_r>
 800095e:	2300      	movs	r3, #0
 8000960:	6363      	str	r3, [r4, #52]	; 0x34
 8000962:	89a3      	ldrh	r3, [r4, #12]
 8000964:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000968:	81a3      	strh	r3, [r4, #12]
 800096a:	2300      	movs	r3, #0
 800096c:	6063      	str	r3, [r4, #4]
 800096e:	6923      	ldr	r3, [r4, #16]
 8000970:	6023      	str	r3, [r4, #0]
 8000972:	89a3      	ldrh	r3, [r4, #12]
 8000974:	f043 0308 	orr.w	r3, r3, #8
 8000978:	81a3      	strh	r3, [r4, #12]
 800097a:	6923      	ldr	r3, [r4, #16]
 800097c:	b94b      	cbnz	r3, 8000992 <__swsetup_r+0x9a>
 800097e:	89a3      	ldrh	r3, [r4, #12]
 8000980:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000984:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000988:	d003      	beq.n	8000992 <__swsetup_r+0x9a>
 800098a:	4621      	mov	r1, r4
 800098c:	4630      	mov	r0, r6
 800098e:	f000 f9ff 	bl	8000d90 <__smakebuf_r>
 8000992:	89a0      	ldrh	r0, [r4, #12]
 8000994:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000998:	f010 0301 	ands.w	r3, r0, #1
 800099c:	d00a      	beq.n	80009b4 <__swsetup_r+0xbc>
 800099e:	2300      	movs	r3, #0
 80009a0:	60a3      	str	r3, [r4, #8]
 80009a2:	6963      	ldr	r3, [r4, #20]
 80009a4:	425b      	negs	r3, r3
 80009a6:	61a3      	str	r3, [r4, #24]
 80009a8:	6923      	ldr	r3, [r4, #16]
 80009aa:	b943      	cbnz	r3, 80009be <__swsetup_r+0xc6>
 80009ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80009b0:	d1ba      	bne.n	8000928 <__swsetup_r+0x30>
 80009b2:	bd70      	pop	{r4, r5, r6, pc}
 80009b4:	0781      	lsls	r1, r0, #30
 80009b6:	bf58      	it	pl
 80009b8:	6963      	ldrpl	r3, [r4, #20]
 80009ba:	60a3      	str	r3, [r4, #8]
 80009bc:	e7f4      	b.n	80009a8 <__swsetup_r+0xb0>
 80009be:	2000      	movs	r0, #0
 80009c0:	e7f7      	b.n	80009b2 <__swsetup_r+0xba>
 80009c2:	bf00      	nop
 80009c4:	20000004 	.word	0x20000004
 80009c8:	08001144 	.word	0x08001144
 80009cc:	08001164 	.word	0x08001164
 80009d0:	08001124 	.word	0x08001124

080009d4 <__sflush_r>:
 80009d4:	898a      	ldrh	r2, [r1, #12]
 80009d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009da:	4605      	mov	r5, r0
 80009dc:	0710      	lsls	r0, r2, #28
 80009de:	460c      	mov	r4, r1
 80009e0:	d458      	bmi.n	8000a94 <__sflush_r+0xc0>
 80009e2:	684b      	ldr	r3, [r1, #4]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	dc05      	bgt.n	80009f4 <__sflush_r+0x20>
 80009e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	dc02      	bgt.n	80009f4 <__sflush_r+0x20>
 80009ee:	2000      	movs	r0, #0
 80009f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80009f6:	2e00      	cmp	r6, #0
 80009f8:	d0f9      	beq.n	80009ee <__sflush_r+0x1a>
 80009fa:	2300      	movs	r3, #0
 80009fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000a00:	682f      	ldr	r7, [r5, #0]
 8000a02:	602b      	str	r3, [r5, #0]
 8000a04:	d032      	beq.n	8000a6c <__sflush_r+0x98>
 8000a06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000a08:	89a3      	ldrh	r3, [r4, #12]
 8000a0a:	075a      	lsls	r2, r3, #29
 8000a0c:	d505      	bpl.n	8000a1a <__sflush_r+0x46>
 8000a0e:	6863      	ldr	r3, [r4, #4]
 8000a10:	1ac0      	subs	r0, r0, r3
 8000a12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000a14:	b10b      	cbz	r3, 8000a1a <__sflush_r+0x46>
 8000a16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a18:	1ac0      	subs	r0, r0, r3
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	4602      	mov	r2, r0
 8000a1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000a20:	6a21      	ldr	r1, [r4, #32]
 8000a22:	4628      	mov	r0, r5
 8000a24:	47b0      	blx	r6
 8000a26:	1c43      	adds	r3, r0, #1
 8000a28:	89a3      	ldrh	r3, [r4, #12]
 8000a2a:	d106      	bne.n	8000a3a <__sflush_r+0x66>
 8000a2c:	6829      	ldr	r1, [r5, #0]
 8000a2e:	291d      	cmp	r1, #29
 8000a30:	d82c      	bhi.n	8000a8c <__sflush_r+0xb8>
 8000a32:	4a2a      	ldr	r2, [pc, #168]	; (8000adc <__sflush_r+0x108>)
 8000a34:	40ca      	lsrs	r2, r1
 8000a36:	07d6      	lsls	r6, r2, #31
 8000a38:	d528      	bpl.n	8000a8c <__sflush_r+0xb8>
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	6062      	str	r2, [r4, #4]
 8000a3e:	04d9      	lsls	r1, r3, #19
 8000a40:	6922      	ldr	r2, [r4, #16]
 8000a42:	6022      	str	r2, [r4, #0]
 8000a44:	d504      	bpl.n	8000a50 <__sflush_r+0x7c>
 8000a46:	1c42      	adds	r2, r0, #1
 8000a48:	d101      	bne.n	8000a4e <__sflush_r+0x7a>
 8000a4a:	682b      	ldr	r3, [r5, #0]
 8000a4c:	b903      	cbnz	r3, 8000a50 <__sflush_r+0x7c>
 8000a4e:	6560      	str	r0, [r4, #84]	; 0x54
 8000a50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000a52:	602f      	str	r7, [r5, #0]
 8000a54:	2900      	cmp	r1, #0
 8000a56:	d0ca      	beq.n	80009ee <__sflush_r+0x1a>
 8000a58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000a5c:	4299      	cmp	r1, r3
 8000a5e:	d002      	beq.n	8000a66 <__sflush_r+0x92>
 8000a60:	4628      	mov	r0, r5
 8000a62:	f000 f9d5 	bl	8000e10 <_free_r>
 8000a66:	2000      	movs	r0, #0
 8000a68:	6360      	str	r0, [r4, #52]	; 0x34
 8000a6a:	e7c1      	b.n	80009f0 <__sflush_r+0x1c>
 8000a6c:	6a21      	ldr	r1, [r4, #32]
 8000a6e:	2301      	movs	r3, #1
 8000a70:	4628      	mov	r0, r5
 8000a72:	47b0      	blx	r6
 8000a74:	1c41      	adds	r1, r0, #1
 8000a76:	d1c7      	bne.n	8000a08 <__sflush_r+0x34>
 8000a78:	682b      	ldr	r3, [r5, #0]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d0c4      	beq.n	8000a08 <__sflush_r+0x34>
 8000a7e:	2b1d      	cmp	r3, #29
 8000a80:	d001      	beq.n	8000a86 <__sflush_r+0xb2>
 8000a82:	2b16      	cmp	r3, #22
 8000a84:	d101      	bne.n	8000a8a <__sflush_r+0xb6>
 8000a86:	602f      	str	r7, [r5, #0]
 8000a88:	e7b1      	b.n	80009ee <__sflush_r+0x1a>
 8000a8a:	89a3      	ldrh	r3, [r4, #12]
 8000a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a90:	81a3      	strh	r3, [r4, #12]
 8000a92:	e7ad      	b.n	80009f0 <__sflush_r+0x1c>
 8000a94:	690f      	ldr	r7, [r1, #16]
 8000a96:	2f00      	cmp	r7, #0
 8000a98:	d0a9      	beq.n	80009ee <__sflush_r+0x1a>
 8000a9a:	0793      	lsls	r3, r2, #30
 8000a9c:	680e      	ldr	r6, [r1, #0]
 8000a9e:	bf08      	it	eq
 8000aa0:	694b      	ldreq	r3, [r1, #20]
 8000aa2:	600f      	str	r7, [r1, #0]
 8000aa4:	bf18      	it	ne
 8000aa6:	2300      	movne	r3, #0
 8000aa8:	eba6 0807 	sub.w	r8, r6, r7
 8000aac:	608b      	str	r3, [r1, #8]
 8000aae:	f1b8 0f00 	cmp.w	r8, #0
 8000ab2:	dd9c      	ble.n	80009ee <__sflush_r+0x1a>
 8000ab4:	6a21      	ldr	r1, [r4, #32]
 8000ab6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000ab8:	4643      	mov	r3, r8
 8000aba:	463a      	mov	r2, r7
 8000abc:	4628      	mov	r0, r5
 8000abe:	47b0      	blx	r6
 8000ac0:	2800      	cmp	r0, #0
 8000ac2:	dc06      	bgt.n	8000ad2 <__sflush_r+0xfe>
 8000ac4:	89a3      	ldrh	r3, [r4, #12]
 8000ac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aca:	81a3      	strh	r3, [r4, #12]
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad0:	e78e      	b.n	80009f0 <__sflush_r+0x1c>
 8000ad2:	4407      	add	r7, r0
 8000ad4:	eba8 0800 	sub.w	r8, r8, r0
 8000ad8:	e7e9      	b.n	8000aae <__sflush_r+0xda>
 8000ada:	bf00      	nop
 8000adc:	20400001 	.word	0x20400001

08000ae0 <_fflush_r>:
 8000ae0:	b538      	push	{r3, r4, r5, lr}
 8000ae2:	690b      	ldr	r3, [r1, #16]
 8000ae4:	4605      	mov	r5, r0
 8000ae6:	460c      	mov	r4, r1
 8000ae8:	b913      	cbnz	r3, 8000af0 <_fflush_r+0x10>
 8000aea:	2500      	movs	r5, #0
 8000aec:	4628      	mov	r0, r5
 8000aee:	bd38      	pop	{r3, r4, r5, pc}
 8000af0:	b118      	cbz	r0, 8000afa <_fflush_r+0x1a>
 8000af2:	6983      	ldr	r3, [r0, #24]
 8000af4:	b90b      	cbnz	r3, 8000afa <_fflush_r+0x1a>
 8000af6:	f000 f887 	bl	8000c08 <__sinit>
 8000afa:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <_fflush_r+0x6c>)
 8000afc:	429c      	cmp	r4, r3
 8000afe:	d11b      	bne.n	8000b38 <_fflush_r+0x58>
 8000b00:	686c      	ldr	r4, [r5, #4]
 8000b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d0ef      	beq.n	8000aea <_fflush_r+0xa>
 8000b0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000b0c:	07d0      	lsls	r0, r2, #31
 8000b0e:	d404      	bmi.n	8000b1a <_fflush_r+0x3a>
 8000b10:	0599      	lsls	r1, r3, #22
 8000b12:	d402      	bmi.n	8000b1a <_fflush_r+0x3a>
 8000b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b16:	f000 f915 	bl	8000d44 <__retarget_lock_acquire_recursive>
 8000b1a:	4628      	mov	r0, r5
 8000b1c:	4621      	mov	r1, r4
 8000b1e:	f7ff ff59 	bl	80009d4 <__sflush_r>
 8000b22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000b24:	07da      	lsls	r2, r3, #31
 8000b26:	4605      	mov	r5, r0
 8000b28:	d4e0      	bmi.n	8000aec <_fflush_r+0xc>
 8000b2a:	89a3      	ldrh	r3, [r4, #12]
 8000b2c:	059b      	lsls	r3, r3, #22
 8000b2e:	d4dd      	bmi.n	8000aec <_fflush_r+0xc>
 8000b30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b32:	f000 f908 	bl	8000d46 <__retarget_lock_release_recursive>
 8000b36:	e7d9      	b.n	8000aec <_fflush_r+0xc>
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <_fflush_r+0x70>)
 8000b3a:	429c      	cmp	r4, r3
 8000b3c:	d101      	bne.n	8000b42 <_fflush_r+0x62>
 8000b3e:	68ac      	ldr	r4, [r5, #8]
 8000b40:	e7df      	b.n	8000b02 <_fflush_r+0x22>
 8000b42:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <_fflush_r+0x74>)
 8000b44:	429c      	cmp	r4, r3
 8000b46:	bf08      	it	eq
 8000b48:	68ec      	ldreq	r4, [r5, #12]
 8000b4a:	e7da      	b.n	8000b02 <_fflush_r+0x22>
 8000b4c:	08001144 	.word	0x08001144
 8000b50:	08001164 	.word	0x08001164
 8000b54:	08001124 	.word	0x08001124

08000b58 <std>:
 8000b58:	2300      	movs	r3, #0
 8000b5a:	b510      	push	{r4, lr}
 8000b5c:	4604      	mov	r4, r0
 8000b5e:	e9c0 3300 	strd	r3, r3, [r0]
 8000b62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000b66:	6083      	str	r3, [r0, #8]
 8000b68:	8181      	strh	r1, [r0, #12]
 8000b6a:	6643      	str	r3, [r0, #100]	; 0x64
 8000b6c:	81c2      	strh	r2, [r0, #14]
 8000b6e:	6183      	str	r3, [r0, #24]
 8000b70:	4619      	mov	r1, r3
 8000b72:	2208      	movs	r2, #8
 8000b74:	305c      	adds	r0, #92	; 0x5c
 8000b76:	f7ff fdef 	bl	8000758 <memset>
 8000b7a:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <std+0x38>)
 8000b7c:	6263      	str	r3, [r4, #36]	; 0x24
 8000b7e:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <std+0x3c>)
 8000b80:	62a3      	str	r3, [r4, #40]	; 0x28
 8000b82:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <std+0x40>)
 8000b84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b86:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <std+0x44>)
 8000b88:	6224      	str	r4, [r4, #32]
 8000b8a:	6323      	str	r3, [r4, #48]	; 0x30
 8000b8c:	bd10      	pop	{r4, pc}
 8000b8e:	bf00      	nop
 8000b90:	08000f85 	.word	0x08000f85
 8000b94:	08000fa7 	.word	0x08000fa7
 8000b98:	08000fdf 	.word	0x08000fdf
 8000b9c:	08001003 	.word	0x08001003

08000ba0 <_cleanup_r>:
 8000ba0:	4901      	ldr	r1, [pc, #4]	; (8000ba8 <_cleanup_r+0x8>)
 8000ba2:	f000 b8af 	b.w	8000d04 <_fwalk_reent>
 8000ba6:	bf00      	nop
 8000ba8:	08000ae1 	.word	0x08000ae1

08000bac <__sfmoreglue>:
 8000bac:	b570      	push	{r4, r5, r6, lr}
 8000bae:	1e4a      	subs	r2, r1, #1
 8000bb0:	2568      	movs	r5, #104	; 0x68
 8000bb2:	4355      	muls	r5, r2
 8000bb4:	460e      	mov	r6, r1
 8000bb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000bba:	f000 f979 	bl	8000eb0 <_malloc_r>
 8000bbe:	4604      	mov	r4, r0
 8000bc0:	b140      	cbz	r0, 8000bd4 <__sfmoreglue+0x28>
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	e9c0 1600 	strd	r1, r6, [r0]
 8000bc8:	300c      	adds	r0, #12
 8000bca:	60a0      	str	r0, [r4, #8]
 8000bcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000bd0:	f7ff fdc2 	bl	8000758 <memset>
 8000bd4:	4620      	mov	r0, r4
 8000bd6:	bd70      	pop	{r4, r5, r6, pc}

08000bd8 <__sfp_lock_acquire>:
 8000bd8:	4801      	ldr	r0, [pc, #4]	; (8000be0 <__sfp_lock_acquire+0x8>)
 8000bda:	f000 b8b3 	b.w	8000d44 <__retarget_lock_acquire_recursive>
 8000bde:	bf00      	nop
 8000be0:	200000a0 	.word	0x200000a0

08000be4 <__sfp_lock_release>:
 8000be4:	4801      	ldr	r0, [pc, #4]	; (8000bec <__sfp_lock_release+0x8>)
 8000be6:	f000 b8ae 	b.w	8000d46 <__retarget_lock_release_recursive>
 8000bea:	bf00      	nop
 8000bec:	200000a0 	.word	0x200000a0

08000bf0 <__sinit_lock_acquire>:
 8000bf0:	4801      	ldr	r0, [pc, #4]	; (8000bf8 <__sinit_lock_acquire+0x8>)
 8000bf2:	f000 b8a7 	b.w	8000d44 <__retarget_lock_acquire_recursive>
 8000bf6:	bf00      	nop
 8000bf8:	2000009b 	.word	0x2000009b

08000bfc <__sinit_lock_release>:
 8000bfc:	4801      	ldr	r0, [pc, #4]	; (8000c04 <__sinit_lock_release+0x8>)
 8000bfe:	f000 b8a2 	b.w	8000d46 <__retarget_lock_release_recursive>
 8000c02:	bf00      	nop
 8000c04:	2000009b 	.word	0x2000009b

08000c08 <__sinit>:
 8000c08:	b510      	push	{r4, lr}
 8000c0a:	4604      	mov	r4, r0
 8000c0c:	f7ff fff0 	bl	8000bf0 <__sinit_lock_acquire>
 8000c10:	69a3      	ldr	r3, [r4, #24]
 8000c12:	b11b      	cbz	r3, 8000c1c <__sinit+0x14>
 8000c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c18:	f7ff bff0 	b.w	8000bfc <__sinit_lock_release>
 8000c1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000c20:	6523      	str	r3, [r4, #80]	; 0x50
 8000c22:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <__sinit+0x68>)
 8000c24:	4a13      	ldr	r2, [pc, #76]	; (8000c74 <__sinit+0x6c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	62a2      	str	r2, [r4, #40]	; 0x28
 8000c2a:	42a3      	cmp	r3, r4
 8000c2c:	bf04      	itt	eq
 8000c2e:	2301      	moveq	r3, #1
 8000c30:	61a3      	streq	r3, [r4, #24]
 8000c32:	4620      	mov	r0, r4
 8000c34:	f000 f820 	bl	8000c78 <__sfp>
 8000c38:	6060      	str	r0, [r4, #4]
 8000c3a:	4620      	mov	r0, r4
 8000c3c:	f000 f81c 	bl	8000c78 <__sfp>
 8000c40:	60a0      	str	r0, [r4, #8]
 8000c42:	4620      	mov	r0, r4
 8000c44:	f000 f818 	bl	8000c78 <__sfp>
 8000c48:	2200      	movs	r2, #0
 8000c4a:	60e0      	str	r0, [r4, #12]
 8000c4c:	2104      	movs	r1, #4
 8000c4e:	6860      	ldr	r0, [r4, #4]
 8000c50:	f7ff ff82 	bl	8000b58 <std>
 8000c54:	68a0      	ldr	r0, [r4, #8]
 8000c56:	2201      	movs	r2, #1
 8000c58:	2109      	movs	r1, #9
 8000c5a:	f7ff ff7d 	bl	8000b58 <std>
 8000c5e:	68e0      	ldr	r0, [r4, #12]
 8000c60:	2202      	movs	r2, #2
 8000c62:	2112      	movs	r1, #18
 8000c64:	f7ff ff78 	bl	8000b58 <std>
 8000c68:	2301      	movs	r3, #1
 8000c6a:	61a3      	str	r3, [r4, #24]
 8000c6c:	e7d2      	b.n	8000c14 <__sinit+0xc>
 8000c6e:	bf00      	nop
 8000c70:	08001120 	.word	0x08001120
 8000c74:	08000ba1 	.word	0x08000ba1

08000c78 <__sfp>:
 8000c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c7a:	4607      	mov	r7, r0
 8000c7c:	f7ff ffac 	bl	8000bd8 <__sfp_lock_acquire>
 8000c80:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <__sfp+0x84>)
 8000c82:	681e      	ldr	r6, [r3, #0]
 8000c84:	69b3      	ldr	r3, [r6, #24]
 8000c86:	b913      	cbnz	r3, 8000c8e <__sfp+0x16>
 8000c88:	4630      	mov	r0, r6
 8000c8a:	f7ff ffbd 	bl	8000c08 <__sinit>
 8000c8e:	3648      	adds	r6, #72	; 0x48
 8000c90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000c94:	3b01      	subs	r3, #1
 8000c96:	d503      	bpl.n	8000ca0 <__sfp+0x28>
 8000c98:	6833      	ldr	r3, [r6, #0]
 8000c9a:	b30b      	cbz	r3, 8000ce0 <__sfp+0x68>
 8000c9c:	6836      	ldr	r6, [r6, #0]
 8000c9e:	e7f7      	b.n	8000c90 <__sfp+0x18>
 8000ca0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000ca4:	b9d5      	cbnz	r5, 8000cdc <__sfp+0x64>
 8000ca6:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <__sfp+0x88>)
 8000ca8:	60e3      	str	r3, [r4, #12]
 8000caa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000cae:	6665      	str	r5, [r4, #100]	; 0x64
 8000cb0:	f000 f847 	bl	8000d42 <__retarget_lock_init_recursive>
 8000cb4:	f7ff ff96 	bl	8000be4 <__sfp_lock_release>
 8000cb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000cbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000cc0:	6025      	str	r5, [r4, #0]
 8000cc2:	61a5      	str	r5, [r4, #24]
 8000cc4:	2208      	movs	r2, #8
 8000cc6:	4629      	mov	r1, r5
 8000cc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000ccc:	f7ff fd44 	bl	8000758 <memset>
 8000cd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000cd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000cd8:	4620      	mov	r0, r4
 8000cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cdc:	3468      	adds	r4, #104	; 0x68
 8000cde:	e7d9      	b.n	8000c94 <__sfp+0x1c>
 8000ce0:	2104      	movs	r1, #4
 8000ce2:	4638      	mov	r0, r7
 8000ce4:	f7ff ff62 	bl	8000bac <__sfmoreglue>
 8000ce8:	4604      	mov	r4, r0
 8000cea:	6030      	str	r0, [r6, #0]
 8000cec:	2800      	cmp	r0, #0
 8000cee:	d1d5      	bne.n	8000c9c <__sfp+0x24>
 8000cf0:	f7ff ff78 	bl	8000be4 <__sfp_lock_release>
 8000cf4:	230c      	movs	r3, #12
 8000cf6:	603b      	str	r3, [r7, #0]
 8000cf8:	e7ee      	b.n	8000cd8 <__sfp+0x60>
 8000cfa:	bf00      	nop
 8000cfc:	08001120 	.word	0x08001120
 8000d00:	ffff0001 	.word	0xffff0001

08000d04 <_fwalk_reent>:
 8000d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d08:	4606      	mov	r6, r0
 8000d0a:	4688      	mov	r8, r1
 8000d0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000d10:	2700      	movs	r7, #0
 8000d12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000d16:	f1b9 0901 	subs.w	r9, r9, #1
 8000d1a:	d505      	bpl.n	8000d28 <_fwalk_reent+0x24>
 8000d1c:	6824      	ldr	r4, [r4, #0]
 8000d1e:	2c00      	cmp	r4, #0
 8000d20:	d1f7      	bne.n	8000d12 <_fwalk_reent+0xe>
 8000d22:	4638      	mov	r0, r7
 8000d24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d28:	89ab      	ldrh	r3, [r5, #12]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d907      	bls.n	8000d3e <_fwalk_reent+0x3a>
 8000d2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000d32:	3301      	adds	r3, #1
 8000d34:	d003      	beq.n	8000d3e <_fwalk_reent+0x3a>
 8000d36:	4629      	mov	r1, r5
 8000d38:	4630      	mov	r0, r6
 8000d3a:	47c0      	blx	r8
 8000d3c:	4307      	orrs	r7, r0
 8000d3e:	3568      	adds	r5, #104	; 0x68
 8000d40:	e7e9      	b.n	8000d16 <_fwalk_reent+0x12>

08000d42 <__retarget_lock_init_recursive>:
 8000d42:	4770      	bx	lr

08000d44 <__retarget_lock_acquire_recursive>:
 8000d44:	4770      	bx	lr

08000d46 <__retarget_lock_release_recursive>:
 8000d46:	4770      	bx	lr

08000d48 <__swhatbuf_r>:
 8000d48:	b570      	push	{r4, r5, r6, lr}
 8000d4a:	460e      	mov	r6, r1
 8000d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d50:	2900      	cmp	r1, #0
 8000d52:	b096      	sub	sp, #88	; 0x58
 8000d54:	4614      	mov	r4, r2
 8000d56:	461d      	mov	r5, r3
 8000d58:	da07      	bge.n	8000d6a <__swhatbuf_r+0x22>
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	602b      	str	r3, [r5, #0]
 8000d5e:	89b3      	ldrh	r3, [r6, #12]
 8000d60:	061a      	lsls	r2, r3, #24
 8000d62:	d410      	bmi.n	8000d86 <__swhatbuf_r+0x3e>
 8000d64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d68:	e00e      	b.n	8000d88 <__swhatbuf_r+0x40>
 8000d6a:	466a      	mov	r2, sp
 8000d6c:	f000 f970 	bl	8001050 <_fstat_r>
 8000d70:	2800      	cmp	r0, #0
 8000d72:	dbf2      	blt.n	8000d5a <__swhatbuf_r+0x12>
 8000d74:	9a01      	ldr	r2, [sp, #4]
 8000d76:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000d7a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000d7e:	425a      	negs	r2, r3
 8000d80:	415a      	adcs	r2, r3
 8000d82:	602a      	str	r2, [r5, #0]
 8000d84:	e7ee      	b.n	8000d64 <__swhatbuf_r+0x1c>
 8000d86:	2340      	movs	r3, #64	; 0x40
 8000d88:	2000      	movs	r0, #0
 8000d8a:	6023      	str	r3, [r4, #0]
 8000d8c:	b016      	add	sp, #88	; 0x58
 8000d8e:	bd70      	pop	{r4, r5, r6, pc}

08000d90 <__smakebuf_r>:
 8000d90:	898b      	ldrh	r3, [r1, #12]
 8000d92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000d94:	079d      	lsls	r5, r3, #30
 8000d96:	4606      	mov	r6, r0
 8000d98:	460c      	mov	r4, r1
 8000d9a:	d507      	bpl.n	8000dac <__smakebuf_r+0x1c>
 8000d9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000da0:	6023      	str	r3, [r4, #0]
 8000da2:	6123      	str	r3, [r4, #16]
 8000da4:	2301      	movs	r3, #1
 8000da6:	6163      	str	r3, [r4, #20]
 8000da8:	b002      	add	sp, #8
 8000daa:	bd70      	pop	{r4, r5, r6, pc}
 8000dac:	ab01      	add	r3, sp, #4
 8000dae:	466a      	mov	r2, sp
 8000db0:	f7ff ffca 	bl	8000d48 <__swhatbuf_r>
 8000db4:	9900      	ldr	r1, [sp, #0]
 8000db6:	4605      	mov	r5, r0
 8000db8:	4630      	mov	r0, r6
 8000dba:	f000 f879 	bl	8000eb0 <_malloc_r>
 8000dbe:	b948      	cbnz	r0, 8000dd4 <__smakebuf_r+0x44>
 8000dc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000dc4:	059a      	lsls	r2, r3, #22
 8000dc6:	d4ef      	bmi.n	8000da8 <__smakebuf_r+0x18>
 8000dc8:	f023 0303 	bic.w	r3, r3, #3
 8000dcc:	f043 0302 	orr.w	r3, r3, #2
 8000dd0:	81a3      	strh	r3, [r4, #12]
 8000dd2:	e7e3      	b.n	8000d9c <__smakebuf_r+0xc>
 8000dd4:	4b0d      	ldr	r3, [pc, #52]	; (8000e0c <__smakebuf_r+0x7c>)
 8000dd6:	62b3      	str	r3, [r6, #40]	; 0x28
 8000dd8:	89a3      	ldrh	r3, [r4, #12]
 8000dda:	6020      	str	r0, [r4, #0]
 8000ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000de0:	81a3      	strh	r3, [r4, #12]
 8000de2:	9b00      	ldr	r3, [sp, #0]
 8000de4:	6163      	str	r3, [r4, #20]
 8000de6:	9b01      	ldr	r3, [sp, #4]
 8000de8:	6120      	str	r0, [r4, #16]
 8000dea:	b15b      	cbz	r3, 8000e04 <__smakebuf_r+0x74>
 8000dec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000df0:	4630      	mov	r0, r6
 8000df2:	f000 f93f 	bl	8001074 <_isatty_r>
 8000df6:	b128      	cbz	r0, 8000e04 <__smakebuf_r+0x74>
 8000df8:	89a3      	ldrh	r3, [r4, #12]
 8000dfa:	f023 0303 	bic.w	r3, r3, #3
 8000dfe:	f043 0301 	orr.w	r3, r3, #1
 8000e02:	81a3      	strh	r3, [r4, #12]
 8000e04:	89a0      	ldrh	r0, [r4, #12]
 8000e06:	4305      	orrs	r5, r0
 8000e08:	81a5      	strh	r5, [r4, #12]
 8000e0a:	e7cd      	b.n	8000da8 <__smakebuf_r+0x18>
 8000e0c:	08000ba1 	.word	0x08000ba1

08000e10 <_free_r>:
 8000e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000e12:	2900      	cmp	r1, #0
 8000e14:	d048      	beq.n	8000ea8 <_free_r+0x98>
 8000e16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e1a:	9001      	str	r0, [sp, #4]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	f1a1 0404 	sub.w	r4, r1, #4
 8000e22:	bfb8      	it	lt
 8000e24:	18e4      	addlt	r4, r4, r3
 8000e26:	f000 f947 	bl	80010b8 <__malloc_lock>
 8000e2a:	4a20      	ldr	r2, [pc, #128]	; (8000eac <_free_r+0x9c>)
 8000e2c:	9801      	ldr	r0, [sp, #4]
 8000e2e:	6813      	ldr	r3, [r2, #0]
 8000e30:	4615      	mov	r5, r2
 8000e32:	b933      	cbnz	r3, 8000e42 <_free_r+0x32>
 8000e34:	6063      	str	r3, [r4, #4]
 8000e36:	6014      	str	r4, [r2, #0]
 8000e38:	b003      	add	sp, #12
 8000e3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000e3e:	f000 b941 	b.w	80010c4 <__malloc_unlock>
 8000e42:	42a3      	cmp	r3, r4
 8000e44:	d90b      	bls.n	8000e5e <_free_r+0x4e>
 8000e46:	6821      	ldr	r1, [r4, #0]
 8000e48:	1862      	adds	r2, r4, r1
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	bf04      	itt	eq
 8000e4e:	681a      	ldreq	r2, [r3, #0]
 8000e50:	685b      	ldreq	r3, [r3, #4]
 8000e52:	6063      	str	r3, [r4, #4]
 8000e54:	bf04      	itt	eq
 8000e56:	1852      	addeq	r2, r2, r1
 8000e58:	6022      	streq	r2, [r4, #0]
 8000e5a:	602c      	str	r4, [r5, #0]
 8000e5c:	e7ec      	b.n	8000e38 <_free_r+0x28>
 8000e5e:	461a      	mov	r2, r3
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	b10b      	cbz	r3, 8000e68 <_free_r+0x58>
 8000e64:	42a3      	cmp	r3, r4
 8000e66:	d9fa      	bls.n	8000e5e <_free_r+0x4e>
 8000e68:	6811      	ldr	r1, [r2, #0]
 8000e6a:	1855      	adds	r5, r2, r1
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	d10b      	bne.n	8000e88 <_free_r+0x78>
 8000e70:	6824      	ldr	r4, [r4, #0]
 8000e72:	4421      	add	r1, r4
 8000e74:	1854      	adds	r4, r2, r1
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	6011      	str	r1, [r2, #0]
 8000e7a:	d1dd      	bne.n	8000e38 <_free_r+0x28>
 8000e7c:	681c      	ldr	r4, [r3, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	6053      	str	r3, [r2, #4]
 8000e82:	4421      	add	r1, r4
 8000e84:	6011      	str	r1, [r2, #0]
 8000e86:	e7d7      	b.n	8000e38 <_free_r+0x28>
 8000e88:	d902      	bls.n	8000e90 <_free_r+0x80>
 8000e8a:	230c      	movs	r3, #12
 8000e8c:	6003      	str	r3, [r0, #0]
 8000e8e:	e7d3      	b.n	8000e38 <_free_r+0x28>
 8000e90:	6825      	ldr	r5, [r4, #0]
 8000e92:	1961      	adds	r1, r4, r5
 8000e94:	428b      	cmp	r3, r1
 8000e96:	bf04      	itt	eq
 8000e98:	6819      	ldreq	r1, [r3, #0]
 8000e9a:	685b      	ldreq	r3, [r3, #4]
 8000e9c:	6063      	str	r3, [r4, #4]
 8000e9e:	bf04      	itt	eq
 8000ea0:	1949      	addeq	r1, r1, r5
 8000ea2:	6021      	streq	r1, [r4, #0]
 8000ea4:	6054      	str	r4, [r2, #4]
 8000ea6:	e7c7      	b.n	8000e38 <_free_r+0x28>
 8000ea8:	b003      	add	sp, #12
 8000eaa:	bd30      	pop	{r4, r5, pc}
 8000eac:	20000088 	.word	0x20000088

08000eb0 <_malloc_r>:
 8000eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eb2:	1ccd      	adds	r5, r1, #3
 8000eb4:	f025 0503 	bic.w	r5, r5, #3
 8000eb8:	3508      	adds	r5, #8
 8000eba:	2d0c      	cmp	r5, #12
 8000ebc:	bf38      	it	cc
 8000ebe:	250c      	movcc	r5, #12
 8000ec0:	2d00      	cmp	r5, #0
 8000ec2:	4606      	mov	r6, r0
 8000ec4:	db01      	blt.n	8000eca <_malloc_r+0x1a>
 8000ec6:	42a9      	cmp	r1, r5
 8000ec8:	d903      	bls.n	8000ed2 <_malloc_r+0x22>
 8000eca:	230c      	movs	r3, #12
 8000ecc:	6033      	str	r3, [r6, #0]
 8000ece:	2000      	movs	r0, #0
 8000ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ed2:	f000 f8f1 	bl	80010b8 <__malloc_lock>
 8000ed6:	4921      	ldr	r1, [pc, #132]	; (8000f5c <_malloc_r+0xac>)
 8000ed8:	680a      	ldr	r2, [r1, #0]
 8000eda:	4614      	mov	r4, r2
 8000edc:	b99c      	cbnz	r4, 8000f06 <_malloc_r+0x56>
 8000ede:	4f20      	ldr	r7, [pc, #128]	; (8000f60 <_malloc_r+0xb0>)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	b923      	cbnz	r3, 8000eee <_malloc_r+0x3e>
 8000ee4:	4621      	mov	r1, r4
 8000ee6:	4630      	mov	r0, r6
 8000ee8:	f000 f83c 	bl	8000f64 <_sbrk_r>
 8000eec:	6038      	str	r0, [r7, #0]
 8000eee:	4629      	mov	r1, r5
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	f000 f837 	bl	8000f64 <_sbrk_r>
 8000ef6:	1c43      	adds	r3, r0, #1
 8000ef8:	d123      	bne.n	8000f42 <_malloc_r+0x92>
 8000efa:	230c      	movs	r3, #12
 8000efc:	6033      	str	r3, [r6, #0]
 8000efe:	4630      	mov	r0, r6
 8000f00:	f000 f8e0 	bl	80010c4 <__malloc_unlock>
 8000f04:	e7e3      	b.n	8000ece <_malloc_r+0x1e>
 8000f06:	6823      	ldr	r3, [r4, #0]
 8000f08:	1b5b      	subs	r3, r3, r5
 8000f0a:	d417      	bmi.n	8000f3c <_malloc_r+0x8c>
 8000f0c:	2b0b      	cmp	r3, #11
 8000f0e:	d903      	bls.n	8000f18 <_malloc_r+0x68>
 8000f10:	6023      	str	r3, [r4, #0]
 8000f12:	441c      	add	r4, r3
 8000f14:	6025      	str	r5, [r4, #0]
 8000f16:	e004      	b.n	8000f22 <_malloc_r+0x72>
 8000f18:	6863      	ldr	r3, [r4, #4]
 8000f1a:	42a2      	cmp	r2, r4
 8000f1c:	bf0c      	ite	eq
 8000f1e:	600b      	streq	r3, [r1, #0]
 8000f20:	6053      	strne	r3, [r2, #4]
 8000f22:	4630      	mov	r0, r6
 8000f24:	f000 f8ce 	bl	80010c4 <__malloc_unlock>
 8000f28:	f104 000b 	add.w	r0, r4, #11
 8000f2c:	1d23      	adds	r3, r4, #4
 8000f2e:	f020 0007 	bic.w	r0, r0, #7
 8000f32:	1ac2      	subs	r2, r0, r3
 8000f34:	d0cc      	beq.n	8000ed0 <_malloc_r+0x20>
 8000f36:	1a1b      	subs	r3, r3, r0
 8000f38:	50a3      	str	r3, [r4, r2]
 8000f3a:	e7c9      	b.n	8000ed0 <_malloc_r+0x20>
 8000f3c:	4622      	mov	r2, r4
 8000f3e:	6864      	ldr	r4, [r4, #4]
 8000f40:	e7cc      	b.n	8000edc <_malloc_r+0x2c>
 8000f42:	1cc4      	adds	r4, r0, #3
 8000f44:	f024 0403 	bic.w	r4, r4, #3
 8000f48:	42a0      	cmp	r0, r4
 8000f4a:	d0e3      	beq.n	8000f14 <_malloc_r+0x64>
 8000f4c:	1a21      	subs	r1, r4, r0
 8000f4e:	4630      	mov	r0, r6
 8000f50:	f000 f808 	bl	8000f64 <_sbrk_r>
 8000f54:	3001      	adds	r0, #1
 8000f56:	d1dd      	bne.n	8000f14 <_malloc_r+0x64>
 8000f58:	e7cf      	b.n	8000efa <_malloc_r+0x4a>
 8000f5a:	bf00      	nop
 8000f5c:	20000088 	.word	0x20000088
 8000f60:	2000008c 	.word	0x2000008c

08000f64 <_sbrk_r>:
 8000f64:	b538      	push	{r3, r4, r5, lr}
 8000f66:	4d06      	ldr	r5, [pc, #24]	; (8000f80 <_sbrk_r+0x1c>)
 8000f68:	2300      	movs	r3, #0
 8000f6a:	4604      	mov	r4, r0
 8000f6c:	4608      	mov	r0, r1
 8000f6e:	602b      	str	r3, [r5, #0]
 8000f70:	f7ff fa58 	bl	8000424 <_sbrk>
 8000f74:	1c43      	adds	r3, r0, #1
 8000f76:	d102      	bne.n	8000f7e <_sbrk_r+0x1a>
 8000f78:	682b      	ldr	r3, [r5, #0]
 8000f7a:	b103      	cbz	r3, 8000f7e <_sbrk_r+0x1a>
 8000f7c:	6023      	str	r3, [r4, #0]
 8000f7e:	bd38      	pop	{r3, r4, r5, pc}
 8000f80:	200000a4 	.word	0x200000a4

08000f84 <__sread>:
 8000f84:	b510      	push	{r4, lr}
 8000f86:	460c      	mov	r4, r1
 8000f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f8c:	f000 f8a0 	bl	80010d0 <_read_r>
 8000f90:	2800      	cmp	r0, #0
 8000f92:	bfab      	itete	ge
 8000f94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000f96:	89a3      	ldrhlt	r3, [r4, #12]
 8000f98:	181b      	addge	r3, r3, r0
 8000f9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000f9e:	bfac      	ite	ge
 8000fa0:	6563      	strge	r3, [r4, #84]	; 0x54
 8000fa2:	81a3      	strhlt	r3, [r4, #12]
 8000fa4:	bd10      	pop	{r4, pc}

08000fa6 <__swrite>:
 8000fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000faa:	461f      	mov	r7, r3
 8000fac:	898b      	ldrh	r3, [r1, #12]
 8000fae:	05db      	lsls	r3, r3, #23
 8000fb0:	4605      	mov	r5, r0
 8000fb2:	460c      	mov	r4, r1
 8000fb4:	4616      	mov	r6, r2
 8000fb6:	d505      	bpl.n	8000fc4 <__swrite+0x1e>
 8000fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f000 f868 	bl	8001094 <_lseek_r>
 8000fc4:	89a3      	ldrh	r3, [r4, #12]
 8000fc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000fca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fce:	81a3      	strh	r3, [r4, #12]
 8000fd0:	4632      	mov	r2, r6
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	4628      	mov	r0, r5
 8000fd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000fda:	f000 b817 	b.w	800100c <_write_r>

08000fde <__sseek>:
 8000fde:	b510      	push	{r4, lr}
 8000fe0:	460c      	mov	r4, r1
 8000fe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fe6:	f000 f855 	bl	8001094 <_lseek_r>
 8000fea:	1c43      	adds	r3, r0, #1
 8000fec:	89a3      	ldrh	r3, [r4, #12]
 8000fee:	bf15      	itete	ne
 8000ff0:	6560      	strne	r0, [r4, #84]	; 0x54
 8000ff2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000ff6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000ffa:	81a3      	strheq	r3, [r4, #12]
 8000ffc:	bf18      	it	ne
 8000ffe:	81a3      	strhne	r3, [r4, #12]
 8001000:	bd10      	pop	{r4, pc}

08001002 <__sclose>:
 8001002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001006:	f000 b813 	b.w	8001030 <_close_r>
	...

0800100c <_write_r>:
 800100c:	b538      	push	{r3, r4, r5, lr}
 800100e:	4d07      	ldr	r5, [pc, #28]	; (800102c <_write_r+0x20>)
 8001010:	4604      	mov	r4, r0
 8001012:	4608      	mov	r0, r1
 8001014:	4611      	mov	r1, r2
 8001016:	2200      	movs	r2, #0
 8001018:	602a      	str	r2, [r5, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	f7ff f9b1 	bl	8000382 <_write>
 8001020:	1c43      	adds	r3, r0, #1
 8001022:	d102      	bne.n	800102a <_write_r+0x1e>
 8001024:	682b      	ldr	r3, [r5, #0]
 8001026:	b103      	cbz	r3, 800102a <_write_r+0x1e>
 8001028:	6023      	str	r3, [r4, #0]
 800102a:	bd38      	pop	{r3, r4, r5, pc}
 800102c:	200000a4 	.word	0x200000a4

08001030 <_close_r>:
 8001030:	b538      	push	{r3, r4, r5, lr}
 8001032:	4d06      	ldr	r5, [pc, #24]	; (800104c <_close_r+0x1c>)
 8001034:	2300      	movs	r3, #0
 8001036:	4604      	mov	r4, r0
 8001038:	4608      	mov	r0, r1
 800103a:	602b      	str	r3, [r5, #0]
 800103c:	f7ff f9bd 	bl	80003ba <_close>
 8001040:	1c43      	adds	r3, r0, #1
 8001042:	d102      	bne.n	800104a <_close_r+0x1a>
 8001044:	682b      	ldr	r3, [r5, #0]
 8001046:	b103      	cbz	r3, 800104a <_close_r+0x1a>
 8001048:	6023      	str	r3, [r4, #0]
 800104a:	bd38      	pop	{r3, r4, r5, pc}
 800104c:	200000a4 	.word	0x200000a4

08001050 <_fstat_r>:
 8001050:	b538      	push	{r3, r4, r5, lr}
 8001052:	4d07      	ldr	r5, [pc, #28]	; (8001070 <_fstat_r+0x20>)
 8001054:	2300      	movs	r3, #0
 8001056:	4604      	mov	r4, r0
 8001058:	4608      	mov	r0, r1
 800105a:	4611      	mov	r1, r2
 800105c:	602b      	str	r3, [r5, #0]
 800105e:	f7ff f9b8 	bl	80003d2 <_fstat>
 8001062:	1c43      	adds	r3, r0, #1
 8001064:	d102      	bne.n	800106c <_fstat_r+0x1c>
 8001066:	682b      	ldr	r3, [r5, #0]
 8001068:	b103      	cbz	r3, 800106c <_fstat_r+0x1c>
 800106a:	6023      	str	r3, [r4, #0]
 800106c:	bd38      	pop	{r3, r4, r5, pc}
 800106e:	bf00      	nop
 8001070:	200000a4 	.word	0x200000a4

08001074 <_isatty_r>:
 8001074:	b538      	push	{r3, r4, r5, lr}
 8001076:	4d06      	ldr	r5, [pc, #24]	; (8001090 <_isatty_r+0x1c>)
 8001078:	2300      	movs	r3, #0
 800107a:	4604      	mov	r4, r0
 800107c:	4608      	mov	r0, r1
 800107e:	602b      	str	r3, [r5, #0]
 8001080:	f7ff f9b7 	bl	80003f2 <_isatty>
 8001084:	1c43      	adds	r3, r0, #1
 8001086:	d102      	bne.n	800108e <_isatty_r+0x1a>
 8001088:	682b      	ldr	r3, [r5, #0]
 800108a:	b103      	cbz	r3, 800108e <_isatty_r+0x1a>
 800108c:	6023      	str	r3, [r4, #0]
 800108e:	bd38      	pop	{r3, r4, r5, pc}
 8001090:	200000a4 	.word	0x200000a4

08001094 <_lseek_r>:
 8001094:	b538      	push	{r3, r4, r5, lr}
 8001096:	4d07      	ldr	r5, [pc, #28]	; (80010b4 <_lseek_r+0x20>)
 8001098:	4604      	mov	r4, r0
 800109a:	4608      	mov	r0, r1
 800109c:	4611      	mov	r1, r2
 800109e:	2200      	movs	r2, #0
 80010a0:	602a      	str	r2, [r5, #0]
 80010a2:	461a      	mov	r2, r3
 80010a4:	f7ff f9b0 	bl	8000408 <_lseek>
 80010a8:	1c43      	adds	r3, r0, #1
 80010aa:	d102      	bne.n	80010b2 <_lseek_r+0x1e>
 80010ac:	682b      	ldr	r3, [r5, #0]
 80010ae:	b103      	cbz	r3, 80010b2 <_lseek_r+0x1e>
 80010b0:	6023      	str	r3, [r4, #0]
 80010b2:	bd38      	pop	{r3, r4, r5, pc}
 80010b4:	200000a4 	.word	0x200000a4

080010b8 <__malloc_lock>:
 80010b8:	4801      	ldr	r0, [pc, #4]	; (80010c0 <__malloc_lock+0x8>)
 80010ba:	f7ff be43 	b.w	8000d44 <__retarget_lock_acquire_recursive>
 80010be:	bf00      	nop
 80010c0:	2000009c 	.word	0x2000009c

080010c4 <__malloc_unlock>:
 80010c4:	4801      	ldr	r0, [pc, #4]	; (80010cc <__malloc_unlock+0x8>)
 80010c6:	f7ff be3e 	b.w	8000d46 <__retarget_lock_release_recursive>
 80010ca:	bf00      	nop
 80010cc:	2000009c 	.word	0x2000009c

080010d0 <_read_r>:
 80010d0:	b538      	push	{r3, r4, r5, lr}
 80010d2:	4d07      	ldr	r5, [pc, #28]	; (80010f0 <_read_r+0x20>)
 80010d4:	4604      	mov	r4, r0
 80010d6:	4608      	mov	r0, r1
 80010d8:	4611      	mov	r1, r2
 80010da:	2200      	movs	r2, #0
 80010dc:	602a      	str	r2, [r5, #0]
 80010de:	461a      	mov	r2, r3
 80010e0:	f7ff f932 	bl	8000348 <_read>
 80010e4:	1c43      	adds	r3, r0, #1
 80010e6:	d102      	bne.n	80010ee <_read_r+0x1e>
 80010e8:	682b      	ldr	r3, [r5, #0]
 80010ea:	b103      	cbz	r3, 80010ee <_read_r+0x1e>
 80010ec:	6023      	str	r3, [r4, #0]
 80010ee:	bd38      	pop	{r3, r4, r5, pc}
 80010f0:	200000a4 	.word	0x200000a4

080010f4 <_init>:
 80010f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010f6:	bf00      	nop
 80010f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010fa:	bc08      	pop	{r3}
 80010fc:	469e      	mov	lr, r3
 80010fe:	4770      	bx	lr

08001100 <_fini>:
 8001100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001102:	bf00      	nop
 8001104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001106:	bc08      	pop	{r3}
 8001108:	469e      	mov	lr, r3
 800110a:	4770      	bx	lr
